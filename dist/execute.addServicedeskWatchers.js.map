{"version":3,"sources":["rpc-types/execute.ts","rpc-types/background.ts","rpc-types/index.ts","../node_modules/serialize-error/index.js","../../src/logger/useLogger.ts","../../src/chrome/executeScript.ts","../node_modules/nanoid/url-alphabet/index.js","../node_modules/nanoid/index.browser.js","../../src/rpc/once.ts","../../src/chrome/queryTabs.ts","../../src/rpc/usePromise.ts","../../src/rpc/useExecutionRPC.ts","execute.addServicedeskWatchers.ts"],"names":["NonError","Error","message","_prepareSuperMessage","Object","defineProperty","value","configurable","writable","captureStackTrace","JSON","stringify","_","String","commonProperties","property","enumerable","destroyCircular","from","seen","to_","forceEnumerable","to","Array","isArray","push","entries","key","includes","slice","serializeError","name","deserializeError","newError","module","exports","urlAlphabet","random","bytes","crypto","getRandomValues","Uint8Array","customRandom","alphabet","size","getRandom","mask","Math","log","length","LN2","step","id","j","customAlphabet","nanoid","byte","toString","toUpperCase"],"mappings":"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","file":"execute.addServicedeskWatchers.js","sourceRoot":"../src","sourcesContent":["import Watcher from \"../models/watcher\";\n\nexport const searchMember = \"searchMember\";\nexport type SearchMember = (\n  projectKey: string,\n  query: string\n) => Promise<Watcher[]>;\n\nexport const addWatchers = \"addWatchers\";\nexport type AddWatchers = (accountIds: string[]) => Promise<boolean>;\n\nexport const addServicedeskWatchers = \"addServicedeskWatchers\";\nexport type AddServicedeskWatchers = (accountIds: string[]) => Promise<boolean>;\n\nexport const alert = \"alert\";\nexport type Alert = (message: string) => Promise<void>;\n\nexport const refresh = \"refresh\";\nexport type Refresh = (options: { confirm?: boolean }) => Promise<void>;\n","export const updateContextMenu = \"updateContextMenu\";\nexport type UpdateContextMenu = () => Promise<void>;\n","export * from \"./execute\";\nexport * from \"./background\";\n","'use strict';\n\nclass NonError extends Error {\n\tconstructor(message) {\n\t\tsuper(NonError._prepareSuperMessage(message));\n\t\tObject.defineProperty(this, 'name', {\n\t\t\tvalue: 'NonError',\n\t\t\tconfigurable: true,\n\t\t\twritable: true\n\t\t});\n\n\t\tif (Error.captureStackTrace) {\n\t\t\tError.captureStackTrace(this, NonError);\n\t\t}\n\t}\n\n\tstatic _prepareSuperMessage(message) {\n\t\ttry {\n\t\t\treturn JSON.stringify(message);\n\t\t} catch (_) {\n\t\t\treturn String(message);\n\t\t}\n\t}\n}\n\nconst commonProperties = [\n\t{property: 'name', enumerable: false},\n\t{property: 'message', enumerable: false},\n\t{property: 'stack', enumerable: false},\n\t{property: 'code', enumerable: true}\n];\n\nconst destroyCircular = ({from, seen, to_, forceEnumerable}) => {\n\tconst to = to_ || (Array.isArray(from) ? [] : {});\n\n\tseen.push(from);\n\n\tfor (const [key, value] of Object.entries(from)) {\n\t\tif (typeof value === 'function') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!value || typeof value !== 'object') {\n\t\t\tto[key] = value;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!seen.includes(from[key])) {\n\t\t\tto[key] = destroyCircular({from: from[key], seen: seen.slice(), forceEnumerable});\n\t\t\tcontinue;\n\t\t}\n\n\t\tto[key] = '[Circular]';\n\t}\n\n\tfor (const {property, enumerable} of commonProperties) {\n\t\tif (typeof from[property] === 'string') {\n\t\t\tObject.defineProperty(to, property, {\n\t\t\t\tvalue: from[property],\n\t\t\t\tenumerable: forceEnumerable ? true : enumerable,\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true\n\t\t\t});\n\t\t}\n\t}\n\n\treturn to;\n};\n\nconst serializeError = value => {\n\tif (typeof value === 'object' && value !== null) {\n\t\treturn destroyCircular({from: value, seen: [], forceEnumerable: true});\n\t}\n\n\t// People sometimes throw things besides Error objects…\n\tif (typeof value === 'function') {\n\t\t// `JSON.stringify()` discards functions. We do too, unless a function is thrown directly.\n\t\treturn `[Function: ${(value.name || 'anonymous')}]`;\n\t}\n\n\treturn value;\n};\n\nconst deserializeError = value => {\n\tif (value instanceof Error) {\n\t\treturn value;\n\t}\n\n\tif (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n\t\tconst newError = new Error();\n\t\tdestroyCircular({from: value, seen: [], to_: newError});\n\t\treturn newError;\n\t}\n\n\treturn new NonError(value);\n};\n\nmodule.exports = {\n\tserializeError,\n\tdeserializeError\n};\n",null,null,"// This alphabet uses `A-Za-z0-9_-` symbols. The genetic algorithm helped\n// optimize the gzip compression for this alphabet.\nlet urlAlphabet =\n  'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW'\n\nexport { urlAlphabet }\n","// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nimport { urlAlphabet } from './url-alphabet/index.js'\n\nif (process.env.NODE_ENV !== 'production') {\n  // All bundlers will remove this block in the production bundle.\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID. If you use Expo, install `expo-random` ' +\n        'and use `nanoid/async`.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Add `if (!window.crypto) window.crypto = window.msCrypto` ' +\n        'before Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\n\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\n\nlet customRandom = (alphabet, size, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  // `Math.clz32` is not used, because it is not available in browsers.\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n\n  // `-~f => Math.ceil(f)` if f is a float\n  // `-~i => i + 1` if i is an integer\n  let step = -~((1.6 * mask * size) / alphabet.length)\n\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\n      let j = step\n      while (j--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[j] & mask] || ''\n        // `id.length + 1 === size` is a more compact option.\n        if (id.length === +size) return id\n      }\n    }\n  }\n}\n\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\n\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      // `0-9a-z`\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      // `A-Z`\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n",null,null,null,null,"import * as rpcTypes from \"./rpc-types\";\n\nimport useExecutionRPC from \"chrome-extension-support/lib/rpc/useExecutionRPC\";\nimport useLogger from \"chrome-extension-support/lib/logger/useLogger\";\n\nconst logger = useLogger();\n\nuseExecutionRPC().serve<rpcTypes.AddServicedeskWatchers>(\n  rpcTypes.addServicedeskWatchers,\n  async (accountIds: string[]): Promise<boolean> => {\n    const issueKey = findIssueKeyFromUrl();\n    if (!issueKey) {\n      throw new Error(\"Cannot find Issue-key from URL.\");\n    }\n    logger.debug(\"Add servicedesk watcher\", accountIds, \"to\", issueKey);\n\n    try {\n      await fetch(`/rest/servicedesk/1/customer/participants/${issueKey}/add`, {\n        method: \"PUT\",\n        headers: { \"content-type\": \"application/json\" },\n        body: JSON.stringify({ accountIds, emails: [], organisationIds: [] }),\n      }).then((r) => r.text());\n    } catch (error) {\n      logger.error(\"Cannot add watcher\", accountIds, issueKey, error);\n    }\n    return true;\n  }\n);\n\nfunction findIssueKeyFromUrl() {\n  const pathname = window.location.pathname;\n  return pathname.split(/\\//).slice(-1)[0] ?? null;\n}\n"]}